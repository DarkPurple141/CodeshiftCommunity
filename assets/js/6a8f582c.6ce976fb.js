"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[5101],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(r),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return r?n.createElement(d,p(p({ref:t},c),{},{components:r})):n.createElement(d,p({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var l=2;l<o;l++)p[l]=r[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1397:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),p=["components"],i={id:"utils",title:"codeshift/utils",slug:"/utils"},s=void 0,l={unversionedId:"api/utils",id:"api/utils",title:"codeshift/utils",description:"CodeshiftCommunity provides a set of utilities to help perform common codemod operations.",source:"@site/docs/api/codeshift-utils.mdx",sourceDirName:"api",slug:"/utils",permalink:"/docs/utils",editUrl:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/edit/main/website/docs/api/codeshift-utils.mdx",tags:[],version:"current",frontMatter:{id:"utils",title:"codeshift/utils",slug:"/utils"},sidebar:"api",previous:{title:"codeshift/cli",permalink:"/docs/cli"},next:{title:"codeshift/test-utils",permalink:"/docs/test-utils"}},c={},m=[{value:"Installation",id:"installation",level:2},{value:"Imports",id:"imports",level:2},{value:"<code>hasImportDeclaration(j, source, sourcePath)</code>",id:"hasimportdeclarationj-source-sourcepath",level:3},{value:"<code>getImportDeclaration(j, source, sourcePath)</code>",id:"getimportdeclarationj-source-sourcepath",level:3},{value:"<code>removeImportDeclaration(j, source, sourcePath)</code>",id:"removeimportdeclarationj-source-sourcepath",level:3},{value:"<code>renameImportDeclaration(j, source, sourcePath, newSourcePath)</code>",id:"renameimportdeclarationj-source-sourcepath-newsourcepath",level:3},{value:"<code>getDefaultImportSpecifier(j, source, sourcePath)</code>",id:"getdefaultimportspecifierj-source-sourcepath",level:3},{value:"<code>getDefaultImportSpecifierName(j, source, sourcePath)</code>",id:"getdefaultimportspecifiernamej-source-sourcepath",level:3},{value:"<code>hasDefaultImportSpecifier(j, source, sourcePath)</code>",id:"hasdefaultimportspecifierj-source-sourcepath",level:3},{value:"<code>removeDefaultImportSpecifier(j, source, sourcePath)</code>",id:"removedefaultimportspecifierj-source-sourcepath",level:3},{value:"<code>hasImportSpecifier(j, source, sourcePath)</code>",id:"hasimportspecifierj-source-sourcepath",level:3},{value:"<code>getImportSpecifier(j, specifier, source)</code>",id:"getimportspecifierj-specifier-source",level:3},{value:"<code>getImportSpecifierName(j, specifier, source)</code>",id:"getimportspecifiernamej-specifier-source",level:3},{value:"<code>insertImportSpecifier(j, source, specifier)</code>",id:"insertimportspecifierj-source-specifier",level:3},{value:"JSX",id:"jsx",level:2},{value:"<code>getJSXAttributes(j, source, attributeName)</code>",id:"getjsxattributesj-source-attributename",level:3},{value:"<code>hasJSXAttributes(j, source, attributeName)</code>",id:"hasjsxattributesj-source-attributename",level:3},{value:"Comments",id:"comments",level:2},{value:"<code>insertCommentBefore(j, source, message, prefix)</code>",id:"insertcommentbeforej-source-message-prefix",level:3},{value:"<code>insertCommentToStartOfFile(j, source, message)</code>",id:"insertcommenttostartoffilej-source-message",level:3},{value:"Motions",id:"motions",level:2},{value:"<code>applyMotions(j, source, motions)</code>",id:"applymotionsj-source-motions",level:3}],u={toc:m};function f(e){var t=e.components,r=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"CodeshiftCommunity provides a set of utilities to help perform common codemod operations."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@codeshift/utils")," is pre-bundled with every codemod that is published to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CodeshiftCommunity/CodeshiftCommunity/tree/main/community"},"community folder"),",\nso there's no need to install it manually."),(0,o.kt)("p",null,"However, it is also available for use outside of this project and compatible with jscodeshift."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"npm install --save-dev @codeshift/utils")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn add -D @codeshift/utils")),(0,o.kt)("h2",{id:"imports"},"Imports"),(0,o.kt)("h3",{id:"hasimportdeclarationj-source-sourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasImportDeclaration(j, source, sourcePath)")),(0,o.kt)("p",null,"Finds an import declaration by source name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { hasImportDeclaration } from '@codeshift/utils';\n\nhasImportDeclaration(j, source, 'react'); // True\n")),(0,o.kt)("h3",{id:"getimportdeclarationj-source-sourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"getImportDeclaration(j, source, sourcePath)")),(0,o.kt)("p",null,"Returns an import declaration by source name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),": Collection containing 1 or more imports"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getImportDeclaration } from '@codeshift/utils';\n\ngetImportDeclaration(j, source, 'react');\n")),(0,o.kt)("h3",{id:"removeimportdeclarationj-source-sourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"removeImportDeclaration(j, source, sourcePath)")),(0,o.kt)("p",null,"Removes an import declaration by source name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { removeImportDeclaration } from '@codeshift/utils';\n\nremoveImportDeclaration(j, source, 'react');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// src/App.js\n-import React, { useEffect } from 'react';\n")),(0,o.kt)("h3",{id:"renameimportdeclarationj-source-sourcepath-newsourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"renameImportDeclaration(j, source, sourcePath, newSourcePath)")),(0,o.kt)("p",null,"Renames an import declaration by source name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { renameImportDeclaration } from '@codeshift/utils';\n\nrenameImportDeclaration(j, source, 'react', 'preact');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// src/App.js\n-import React, { useEffect } from 'react';\n+import React, { useEffect } from 'preact';\n")),(0,o.kt)("h3",{id:"getdefaultimportspecifierj-source-sourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"getDefaultImportSpecifier(j, source, sourcePath)")),(0,o.kt)("p",null,"Finds a default import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),": Collection containing all matched default import specifiers"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getDefaultImportSpecifier } from '@codeshift/utils';\n\ngetDefaultImportSpecifier(j, source, 'react'); // Collection containing 'React'\n")),(0,o.kt)("h3",{id:"getdefaultimportspecifiernamej-source-sourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"getDefaultImportSpecifierName(j, source, sourcePath)")),(0,o.kt)("p",null,"Finds a default import specifier and returns its name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string | null"),": Default import's name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getDefaultImportSpecifierName } from '@codeshift/utils';\n\ngetDefaultImportSpecifierName(j, source, 'react'); // Collection containing 'React'\n")),(0,o.kt)("h3",{id:"hasdefaultimportspecifierj-source-sourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasDefaultImportSpecifier(j, source, sourcePath)")),(0,o.kt)("p",null,"Attempts to find a default import specifier and returns a boolean result"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { hasDefaultImportSpecifier } from '@codeshift/utils';\n\nhasDefaultImportSpecifier(j, source, 'react'); // True\n")),(0,o.kt)("h3",{id:"removedefaultimportspecifierj-source-sourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"removeDefaultImportSpecifier(j, source, sourcePath)")),(0,o.kt)("p",null,"Attempts to remove a default import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { removeDefaultImportSpecifier } from '@codeshift/utils';\n\nremoveDefaultImportSpecifier(j, source, 'React');\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"-import React, { useEffect } from 'react';\n+import { useEffect } from 'react';\n")),(0,o.kt)("h3",{id:"hasimportspecifierj-source-sourcepath"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasImportSpecifier(j, source, sourcePath)")),(0,o.kt)("p",null,"Checks for an import import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { hasImportSpecifier } from '@codeshift/utils';\n\nhasImportSpecifier(j, source, 'react', 'useEffect'); // True\n")),(0,o.kt)("h3",{id:"getimportspecifierj-specifier-source"},(0,o.kt)("inlineCode",{parentName:"h3"},"getImportSpecifier(j, specifier, source)")),(0,o.kt)("p",null,"Finds an import specifier by name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),": Collection containing all matched import specifiers"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getImportSpecifier } from '@codeshift/utils';\n\ngetImportSpecifier(j, source, 'useEffect'); // Collection containing 'useEffect'\n")),(0,o.kt)("h3",{id:"getimportspecifiernamej-specifier-source"},(0,o.kt)("inlineCode",{parentName:"h3"},"getImportSpecifierName(j, specifier, source)")),(0,o.kt)("p",null,"Returns the local name of an import. This is useful for cases where an import specifier is potentially aliased."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string")," | null: specifier name or null if not found"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect as foo } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getImportSpecifierName } from '@codeshift/utils';\n\ngetImportSpecifierName(j, source, 'useEffect', 'react'); // 'foo'\n")),(0,o.kt)("h3",{id:"insertimportspecifierj-source-specifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"insertImportSpecifier(j, source, specifier)")),(0,o.kt)("p",null,"Inserts an import specifier"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React, { useEffect } from 'react';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getImportSpecifier } from '@codeshift/utils';\n\ninsertImportSpecifier(j, source, 'useMemo', 'react'); // Collection containing 'useEffect'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// src/App.js\n-import React, { useEffect } from 'react';\n+import React, { useEffect, useMemo } from 'react';\n")),(0,o.kt)("h2",{id:"jsx"},"JSX"),(0,o.kt)("h3",{id:"getjsxattributesj-source-attributename"},(0,o.kt)("inlineCode",{parentName:"h3"},"getJSXAttributes(j, source, attributeName)")),(0,o.kt)("p",null,"Finds a JSX attributeName (aka prop) by name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Collection"),": Collection containing all matched jsx attributes"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { getJSXAttributes } from '@codeshift/utils';\n\ngetJSXAttributes(j, source, 'primary'); // Collection containing 'primary'\n")),(0,o.kt)("h3",{id:"hasjsxattributesj-source-attributename"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasJSXAttributes(j, source, attributeName)")),(0,o.kt)("p",null,"Finds a JSX attributeName (aka prop) by name and returns true if found"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"boolean")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { hasJSXAttributes } from '@codeshift/utils';\n\nhasJSXAttributes(j, source, 'primary'); // Found!\n")),(0,o.kt)("h2",{id:"comments"},"Comments"),(0,o.kt)("h3",{id:"insertcommentbeforej-source-message-prefix"},(0,o.kt)("inlineCode",{parentName:"h3"},"insertCommentBefore(j, source, message, prefix)")),(0,o.kt)("p",null,"Appends a comment before the provided node"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { insertCommentBefore } from '@codeshift/utils';\n\ninsertCommentBefore(\n  j,\n  path.find(j.ImportDeclaration),\n  'This should be removed in favour of mylib',\n);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// src/App.js\nimport React from 'react';\n\n// TODO: (@codeshift) This should be removed in favour of mylib\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("h3",{id:"insertcommenttostartoffilej-source-message"},(0,o.kt)("inlineCode",{parentName:"h3"},"insertCommentToStartOfFile(j, source, message)")),(0,o.kt)("p",null,"Appends a comment to the start of a file"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { insertCommentToStartOfFile } from '@codeshift/utils';\n\ninsertCommentToStartOfFile(\n  j,\n  path.find(j.ImportDeclaration),\n  'This should be removed in favour of mylib',\n);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// src/App.js\n// TODO: (Codemod) This should be removed in favour of mylib\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n")),(0,o.kt)("h2",{id:"motions"},"Motions"),(0,o.kt)("h3",{id:"applymotionsj-source-motions"},(0,o.kt)("inlineCode",{parentName:"h3"},"applyMotions(j, source, motions)")),(0,o.kt)("p",null,"A helper function to apply an array of motions in sequence."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { applyMotions } from '@codeshift/utils';\nimport { sortImports } from './motions';\n\napplyMotions(j, j(fileInfo.source), [sortImports, removeVar]);\n")))}f.isMDXComponent=!0}}]);